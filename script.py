import telebot
from telebot import types
import sqlite3
from db import *




@bot.message_handler(commands = ['start'])
def start(message):

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ie = is_exist(message.chat.id)
	irl = True if len(message.text.split(' ')) == 2 else False

	if ie == False:
		# bot.send_message(message.chat.id, message.text)
		registration(message, message.text.split(' ')[1] if irl else None)
		captcha(message)

	else:
		category = get_user_data(message.chat.id)['category']
		if category == 'captcha':
			captcha(message)

		elif category == 'sponsors':
			sponsors(message)


@bot.message_handler(commands = ['profile'])
def profile_command(message):
	if is_exist(message.chat.id) == True:
		profile(message)


@bot.message_handler(commands = ['refsystem'])
def refprogram_command(message):
	if is_exist(message.chat.id) == True:
		refprogram(message)


@bot.message_handler(commands = ['info'])
def info_command(message):
	if is_exist(message.chat.id) == True:
		info(message)


@bot.message_handler(content_types = ['text'])
def text(message):
	if is_exist(message.chat.id) == True:
		category = get_user_data(message.chat.id)['category']
		if category == 'captcha':
			if message.text == get_user_data(message.chat.id)['captcha_code']:
				sponsors(message)
			else:
				bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ')

		elif category == 'withdrawn':
			summ = message.text
			try:
				summ = float(summ)
			except:
				bot.send_message(message.chat.id, '<b>‚ùå  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!</b>', parse_mode = 'html')
				return None

			if summ < 4:
				bot.send_message(message.chat.id, '<b>‚ùå  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 4 TRX!</b>', parse_mode = 'html')
				return None

			available = (get_all_referals_amount_and_sum(message.chat.id)[1] + get_user_data(message.chat.id)['balance'] - get_user_data(message.chat.id)['withdrawn']) * 0.0001
			if summ > available:
				bot.send_message(message.chat.id, f'<b>‚ùå  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ {summ} TRX!</b>\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <code>{available} TRX</code>', parse_mode = 'html')
				return None

			number = make_withdrawn(message, summ)

		elif message.chat.id == 5658727360:
			telegram_id = message.text.split('_')[0]
			summ = message.text.split('_')[1]
			withdrawn_number = message.text.split('_')[2]
			link = message.text.split('_')[3]

			bot.send_message(int(telegram_id), f'<b>üì§  –í—ã–ø–ª–∞—Ç–∞</b>\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{withdrawn_number} –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n<b>–°—É–º–º–∞: </b><code>{summ} TRX</code>\n<b>–°—Å—ã–ª–∫–∞: </b>{link}', parse_mode = 'html')
			disactivate_withdraw(withdrawn_number)




@bot.callback_query_handler(func=lambda call: True)
def call(call):
	if is_exist(call.message.chat.id) == True:
		category = get_user_data(call.message.chat.id)['category']
		data = call.data
		if data == 'subscribed':
			if category == 'sponsors':
				result = check_subscription(call.message)
				if result == False:
					bot.answer_callback_query(callback_query_id = call.id, text = '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã!', show_alert = True)
				else:
					bot.send_message(call.message.chat.id, '‚úÖ  <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>', parse_mode = 'html')
					activate_user(call.message.chat.id)
					profile(call.message)

		if data == 'withdraw':
			if category == 'profile':
				balance, withwrawn = get_all_referals_amount_and_sum(call.message.chat.id)[1] + get_user_data(call.message.chat.id)['balance'], get_user_data(call.message.chat.id)['withdrawn']
				if balance - withwrawn < 40000:
					bot.answer_callback_query(callback_query_id = call.id, text = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 4 TRX', show_alert = True)

				else:
					withdrawn(call.message)


@bot.inline_handler(lambda query: len(query.query) >= 0)
def query_text(query):
	telegram_id = query.from_user.id
	if is_exist(telegram_id) not in [None, False]:
		results = []
		request = query.query
		if get_referrer_by_refcode(request) != None:
			content = content = f'<b>–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å TRX!\n\n5Ô∏è‚É£ - —É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!</b>\n\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π TRX —É–∂–µ —Å–µ–π—á–∞—Å!'
			results.append(types.InlineQueryResultArticle(id = random.randint(10000, 999999), title = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', description = '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º', input_message_content = types.InputTextMessageContent(message_text = content, parse_mode='html'), reply_markup = inline_mode_buttons(request)))

	try:
		if len(results) != 0:
			bot.answer_inline_query(inline_query_id = query.id, results = results,  cache_time = 0)
	except:
		pass

# bot.polling(none_stop = True)


while True:
	try:
		bot.polling(none_stop = True)
	except:
		pass


