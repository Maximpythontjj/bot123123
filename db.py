import sqlite3
import random
import os
import telebot
from telebot import types
import time


token = '6039673649:AAEm3zU2042SlCCGK5ZRSU1nwsSrPkobQT4'
bot = telebot.TeleBot(token)
CHARS = 'QWERTYUIOPLKJHGFDSAZXCVBNM1234567890qwertyuioplkjhgfdsazxcvbnm'


def sponsors_buttons():
	kb = types.InlineKeyboardMarkup()
	kb.add(types.InlineKeyboardButton(text = 'üîó  –ö–∞–Ω–∞–ª', url = 'https://t.me/sharkprogect'))
	kb.add(types.InlineKeyboardButton(text = 'üîó  –°–ø–æ–Ω—Å–æ—Ä 1', url = 'https://t.me/sr_garfield'))
	kb.add(types.InlineKeyboardButton(text = '‚úÖ  –ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data = 'subscribed'))
	return kb


def info_buttons():
	kb = types.InlineKeyboardMarkup()
	kb.add(types.InlineKeyboardButton(text = 'üë§  –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º', url = 'https://t.me/crypton_g24'))
	kb.add(types.InlineKeyboardButton(text = 'ü§ñ  –•–æ—á—É —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞', url = 'https://t.me/sr_garfield_27'))
	return kb

def refprogram_buttons(telegram_id):
	kb = types.InlineKeyboardMarkup()
	kb.add(types.InlineKeyboardButton(text = 'üîó  –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', switch_inline_query = f'{get_user_data(telegram_id)["refcode"]}'))
	return kb


def inline_mode_buttons(req):
	kb = types.InlineKeyboardMarkup()
	kb.add(types.InlineKeyboardButton(text = '–ü–æ–ª—É—á–∏—Ç—å TRX', url = f'https://t.me/TronTrxBot?start={req}'))
	return kb


def get_total_users():
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "SELECT COUNT(telegram_id) FROM users WHERE status = 1"
	cur.execute(query)
	return cur.fetchone()[0]



def profile_buttons():
	kb = types.InlineKeyboardMarkup()
	kb.add(types.InlineKeyboardButton(text = 'üì§  –í—ã–≤–µ—Å—Ç–∏', callback_data = 'withdraw'))
	return kb


def set_captcha(telegram_id, code):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "UPDATE users SET captcha_code = ? WHERE telegram_id = ?"
	cur.execute(query, (code, telegram_id))
	con.commit()


def set_category(telegram_id, category):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "UPDATE users SET category = ? WHERE telegram_id = ?"
	cur.execute(query, (category, telegram_id))
	con.commit()


def update_withdrawn(telegram_id, amount):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "UPDATE users SET withdrawn = ? WHERE telegram_id = ?"
	cur.execute(query, (get_user_data(telegram_id)["withdrawn"] + amount * 10000, telegram_id))
	con.commit()	


def get_random_sample():
	png_files = [f for f in os.listdir('samples') if f.endswith('.png')]
	if not png_files:
		return None
	return os.path.join('samples', random.choice(png_files))


def get_user_data(telegram_id):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "SELECT * FROM users WHERE telegram_id=?"
	cur.execute(query, (telegram_id,))
	data = cur.fetchone()
	return {
		'telegram_id' : data[0],
		'useraname' : data[1],
		'firstname' : data[2],
		'lastname' : data[3],
		'balance' : data[4],
		'refcode' : data[5],
		'referrer' : data[6],
		'status' : data[7],
		'category' : data[8],
		'captcha_code': data[9],
		'regtime': data[10],
		'withdrawn' : data[11]
	}




def get_referrer_by_refcode(refcode):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "SELECT telegram_id FROM users WHERE refcode=?"
	cur.execute(query, (refcode,))
	data = cur.fetchone()
	if data == None:
		return None
	return data[0]

def is_exist(telegram_id):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "SELECT telegram_id FROM users WHERE telegram_id=?"
	cur.execute(query, (telegram_id,))
	if cur.fetchone() == None:
		return False
	return True


def registration(message, is_ref_link):
	refcode = ''
	for i in range(10):
		refcode += random.choice(CHARS)

	referrer = get_referrer_by_refcode(is_ref_link) if is_ref_link else None

	con = sqlite3.connect("data.db")
	cur = con.cursor()

	query = "INSERT INTO users (telegram_id, username, firstname, lastname, balance, refcode, referrer, status, category, captcha_code, regtime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
	cur.execute(query, (message.chat.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, 0, refcode, referrer, 0, 'captcha', None, None))
	con.commit()

	return refcode


def sponsors(message):
	text = '<b>‚è≥  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª, –∞ —Ç–∞–∫–∂–µ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:'
	bot.send_message(message.chat.id, text, parse_mode = 'html', reply_markup = sponsors_buttons())
	set_category(message.chat.id, 'sponsors')



def captcha(message):
	random_sample_path = get_random_sample()
	code = ((random_sample_path.split('\\'))[1].split('.'))[0]
	with open(random_sample_path, 'rb') as f:
		bot.send_photo(message.chat.id, f, caption = '<b>‚úçÔ∏è  –í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É:</b>', parse_mode = 'html')

	set_captcha(message.chat.id, code)


def set_regtime(telegram_id):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "UPDATE users SET regtime = ? WHERE telegram_id = ?"
	cur.execute(query, (int(time.time()), telegram_id))
	con.commit()


def check_subscription(message):
	telegram_id = message.chat.id
	# -1001734204714
	result = bot.get_chat_member(-1001537310587, telegram_id).status in ['member', 'administrator', 'creator'] and bot.get_chat_member(-1001734204714, telegram_id).status in ['member', 'administrator', 'creator']
	print(result)
	return result

def activate_user(telegram_id):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "UPDATE users SET status = ? WHERE telegram_id = ?"
	cur.execute(query, (1, telegram_id))
	con.commit()
	set_regtime(telegram_id)

def disactivate_withdraw(withdrawn_number):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "UPDATE withdrawns SET status = ? WHERE withdrawn_number = ?"
	cur.execute(query, (0, withdrawn_number))
	con.commit()


def get_referrals_by_telegram_id(telegram_id):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "SELECT telegram_id FROM users WHERE referrer=? AND status = 1"
	cur.execute(query, (telegram_id,))
	data = cur.fetchall()
	list = []
	for i in range(len(data)):
		list.append(data[i][0])

	return list


def get_all_referals_amount_and_sum(telegram_id):
	first_level, second_level, third_level, forth_level, fifth_level = get_referrals(telegram_id)
	fl = len(first_level)
	sl = len(second_level)
	tl = len(third_level)
	frl = len(forth_level)
	fil = len(fifth_level)
	amount = fl + sl + tl + frl + fil
	sum = fl*1000 + sl*700 + tl*300 + frl*200 + fil*100
	return [amount, sum] 



def get_referrals(telegram_id, level = None):
	first_level = []
	second_level = []
	third_level = []
	forth_level = []
	fifth_level = []

	first_level += get_referrals_by_telegram_id(telegram_id)

	for i in range(len(first_level)):
		second_level += get_referrals_by_telegram_id(first_level[i])

	for i in range(len(second_level)):
		third_level += get_referrals_by_telegram_id(second_level[i])

	for i in range(len(third_level)):
		forth_level += get_referrals_by_telegram_id(third_level[i])

	for i in range(len(forth_level)):
		fifth_level += get_referrals_by_telegram_id(forth_level[i])

	if level == None:
		return first_level, second_level, third_level, forth_level, fifth_level 

	if level == 1:
		return first_level
	if level == 2:
		return second_level
	if level == 3:
		return third_level
	if level == 4:
		return forth_level
	if level == 5:
		return fifth_level


def tf_hours_users():
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "SELECT COUNT(telegram_id) FROM users WHERE regtime > ? and status = 1"
	cur.execute(query, (int(time.time() - 86400),))
	return cur.fetchone()[0]


def total_withdrawn():
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	query = "SELECT SUM(withdrawn) FROM users"
	cur.execute(query)
	return cur.fetchone()[0]

def profile(message):
	data = get_user_data(message.chat.id)
	days = ((int(time.time()) - data['regtime']) // 86400) + 1
	referrals = get_referrals(message.chat.id)
	all_referals_amount_and_sum = get_all_referals_amount_and_sum(message.chat.id)
	text = f'üÜî  <b>–ü—Ä–æ—Ñ–∏–ª—å</b>  <code>{data["firstname"]} {data["lastname"] if data["lastname"] else ""}</code>\n\n<b>üí∞  –ë–∞–ª–∞–Ω—Å: </b>{((all_referals_amount_and_sum[1]) - data["withdrawn"] + data["balance"]) * 0.0001} TRX\n<b>üë®‚Äçüë©‚Äçüëß‚Äçüë¶  –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö: </b> {all_referals_amount_and_sum[0]}\n<b>üíµ  –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏: </b>{round((all_referals_amount_and_sum[1]) * 0.0001, 4)} TRX\n<b>üéÅ  –ë–æ–Ω—É—Å—ã: </b>{round((get_user_data(message.chat.id)["balance"]) * 0.0001, 4)} TRX\n<b>üì§  –í—ã–≤–µ–¥–µ–Ω–æ: </b>{(data["withdrawn"]) * 0.0001} TRX\n\n<b>‚è≥  –í—ã —Å –Ω–∞–º–∏: </b><code>{days} {"–¥–µ–Ω—å" if days == 1 else "–¥–Ω—è" if days in [2, 3, 4] else "–¥–Ω–µ–π"}</code>'
	bot.send_message(message.chat.id, text, parse_mode = 'html', reply_markup = profile_buttons())
	set_category(message.chat.id, 'profile')


def refprogram(message):
	first_level, second_level, third_level, forth_level, fifth_level = get_referrals(message.chat.id)
	reflink = f'http://t.me/TronTrxBot?start={get_user_data(message.chat.id)["refcode"]}'
	text = f'<b>üë®‚Äçüë©‚Äçüëß‚Äçüë¶  –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n<code><b>1Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å: </b>{len(first_level)} | {round((len(first_level) * 1000) * 0.0001, 4)} TRX\n<b>2Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å: </b>{len(second_level)} | {round((len(second_level) * 700) * 0.0001, 4)} TRX\n<b>3Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å: </b>{len(third_level)} | {round((len(third_level) * 300) * 0.0001, 4)} TRX\n<b>4Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å: </b>{len(forth_level)} | {round((len(forth_level) * 200) * 0.0001, 4)} TRX\n<b>5Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å: </b>{len(fifth_level)} | {round((len(fifth_level) * 100) * 0.0001, 4)} TRX</code>\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:\n\n<code>0.1 TRX –∑–∞ 1 —É—Ä–æ–≤–µ–Ω—å\n0.07 TRX –∑–∞ 2 —É—Ä–æ–≤–µ–Ω—å\n0.03 TRX –∑–∞ 3 —É—Ä–æ–≤–µ–Ω—å\n0.02 TRX –∑–∞ 4 —É—Ä–æ–≤–µ–Ω—å\n0.01 TRX –∑–∞ 5 —É—Ä–æ–≤–µ–Ω—å</code>\n\n<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: </b>\n{reflink}'
	bot.send_message(message.chat.id, text, parse_mode = 'html', reply_markup = refprogram_buttons(message.chat.id))
	set_category(message.chat.id, 'refprogram')


def info(message):
	text = f'<b>‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n<b>üë®‚Äçüë©‚Äçüëß‚Äçüë¶  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {get_total_users()}\n<b>üÜï  –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: </b>{tf_hours_users()}\n<b>üì§  –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: </b><code>{total_withdrawn() * 0.0001} TRX</code>'
	bot.send_message(message.chat.id, text, parse_mode = 'html', reply_markup = info_buttons())
	set_category(message.chat.id, 'info')


def withdrawn(message):
	withdrawn = get_user_data(message.chat.id)['withdrawn']
	all_referals_amount_and_sum = get_all_referals_amount_and_sum(message.chat.id)[1]
	available = all_referals_amount_and_sum + get_user_data(message.chat.id)['balance'] - withdrawn

	text = f'<b>üì§  –í—ã–≤–æ–¥</b>\n\n<b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: </b><code>{(available) * 0.0001} TRX</code>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:'
	bot.send_message(message.chat.id, text, parse_mode = 'html')
	set_category(message.chat.id, 'withdrawn')


def make_withdrawn(message, summ):
	withdrawn_number = ''
	for i in range(10):
		withdrawn_number += random.choice(CHARS) 

	update_withdrawn(message.chat.id, summ)
	withdrawn_making(message, summ, withdrawn_number)
	text = f'<b>üì§  –í—ã–ø–ª–∞—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Å—Ä–æ–∫ –æ—Ç 1 —á–∞—Å–∞ –¥–æ 48 —á–∞—Å–æ–≤.\n\n<b>–ù–æ–º–µ—Ä –≤—ã–ø–ª–∞—Ç—ã: </b>{withdrawn_number}\n<b>–°—É–º–º–∞: </b><code>{summ} TRX</code>\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ! –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>'
	bot.send_message(message.chat.id, text, parse_mode = 'html')
	bot.send_message(5658727360, f'<b>üì§  –í—ã–ø–ª–∞—Ç–∞</b>\n\n<b>Telegram ID: </b>{message.chat.id}\n<b>–ò–º—è / –§–∞–º–∏–ª–∏—è: </b>{message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name != None else ""}\n<b>–Æ–∑–µ—Ä–Ω–µ–π–º: </b>{message.from_user.username}\n<b>–°—É–º–º–∞: </b><code>{summ}</code>\n<b>–ù–æ–º–µ—Ä –≤—ã–ø–ª–∞—Ç—ã: </b>{withdrawn_number}\n\n<code>{message.chat.id}_{summ}_{withdrawn_number}_</code>', parse_mode = 'html')
	set_category(message.chat.id, 'profile')


def withdrawn_making(message, summ, number):
	con = sqlite3.connect("data.db")
	cur = con.cursor()

	query = "INSERT INTO withdrawns (telegram_id, username, summ, withdrawn_time, withdrawn_number) VALUES (?, ?, ?, ?, ?)"
	cur.execute(query, (message.chat.id, message.from_user.username, summ, int(time.time()), number))
	con.commit()




